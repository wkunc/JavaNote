Spring IoC容器和Bean概述

//以后解释IoC和DI

org.springframework.beans和org.springframework.context包是Spring框架的IoC容器基础
BeanFactory接口提供了一个先进的配置机制
ApplicationContext()是BeanFactory的一个子接口。它增加了更方便的Spring的AOP功能，消息资源处理，等
总之ApplicationContext是BeanFactory的一个完整的超集

1.使用
    Spring提供了几个开箱即用的ApplicationContext的接口的实现
    如: ClassPathXmlAplicationContext
        FileSystemXmlApplicationContext

2.配置元数据
    配置元数据是为了告诉Spring的容器如何去实例化，配置和装备你应用中的对象
    配置元数据有下面三种方式:
        XML,
        基于注解的配置,
        基于Java的配置

2.1基于XML的配置
    //文档声明就不放这了，这里就讲
    每一个bean在xml中<beans/>
    bean标签有以下几个属性
            class                      Section 5.3.2, “实例化bean”

            name                        Section 5.3.1, “bean的命名”

            scope                       Section 5.5, “Bean作用域”       默认sington(单例)

            constructor arguments       Section 5.4.1, “依赖注入”

            properties                  Section 5.4.1, “依赖注入”
            
            autowiring mode             Section 5.4.5, “自动装配协作者”

            lazy-initialization mode    Section 5.4.4, “延迟初始化bean”

            initialization method       the section called “初始化回调函数”

            destruction method          the section called “析构回调函数”

    2.1.1基于constructor-arg子标签的DI注入
        首先javabean中要先提供带参的构造器
            <constructor-arg ref="otherBean"/>
            <constructor-arg value="7500"/>

        如果构造器有多个参数那么参数的传入顺序和
            <constructor-arg/>标签的顺序有关

        type属性可以指定简单类型
            <constructor-arg type="int" value="7500"/>

        也可以用index属性显式的表明顺序(下标从0开始)
            <constructor-arg index="0" value="7500"/>
        
        最后的最强方式是利用@ConstructorProperties注解给构造器的参数起名字

            @ConstructorProperties({"years", "ultimateAnswer"})
            public ExampleBean(int years, String ultimateAnswer) {
                this.years = years;
                this.ultimateAnswer = ultimateAnswer;
            }
        然后在配置中用名字标识
            <bean id="exampleBean" class="examples.ExampleBean">
                <constructor-arg name="years" value="7500000"/>
                <constructor-arg name="ultimateAnswer" value="42"/>
            </bean>

    2.1.2 基于Setter注入
        name和bean中的属性名一致
        <property name="beanTwo" ref="yetAnotherBean"/>
    
    2.2.1初始化方法
        第一种方法(不好，会让应用和spring耦合)
            实现org.springframework.beans.factory.InitializingBean接口

        第二种
            使用@PostConstruct注解标明
            然后用init-method属性指明
    
    2.2.2销毁方法(和初始化类似就不在详细描述)
        org.springframework.beans.factory.DisposablebBean
        @PostDestroy
    

基于java配置
    @Component
    @Service
    @Controller
    @Re
    可以混用，最好不要

    @Autowired          这个注解是通过类型匹配的by type,如果有同类型的bean会导致歧义(一般是interface的多个 imp)
        required=false
    
    spring 4.x 中添加了泛型依赖注入
