#+title: 循环依赖
#+author: wkunc
#+date: <2023-08-02 三> 

* 循环依赖
Bean注册顺序或者说Bean初始化顺序引发的循环依赖问题.

** Bean注册顺序对循环依赖问题的影响 

Spring 官网描述了循环依赖问题, 网络上也有很多分析Bean创建过程来分析Spring是如何解决部分循环依赖的.
大致就是允许获取Bean的早期引用来解决

[[Spring文档描述Circular dependencies][https://docs.spring.io/spring-framework/reference/core/beans/dependencies/factory-collaborators.html#beans-dependency-resolution]]
描述了将构造器注入替换为Setter注入解决循环依赖的问题.


*** 代码示例
如果 ~ServiceA~, ~ServiceB~ 通过构造器互相依赖.
在运行时我们就会得到一个异常, SpringBoot 会给出一个友好的提示.

#+begin_example 
***************************
APPLICATION FAILED TO START
***************************

Description:

The dependencies of some of the beans in the application context form a cycle:

┌─────┐
|  serviceA defined in file [/Users/wkunc/IdeaProjects/DI-Cycle/target/classes/com/example/dicycle/ServiceA.class]
↑     ↓
|  serviceB defined in file [/Users/wkunc/IdeaProjects/DI-Cycle/target/classes/com/example/dicycle/ServiceB.class]
└─────┘
#+end_example

接下来我们将 ~ServiceA~ 修改为setter方法注入.
#+begin_example java

//@Lazy
@Component
public class ServiceA {

    private ServiceB b;

    @Autowired
    public void setB(ServiceB b) {
        this.b = b;
    }

    @PreDestroy
    public void hello() {
        System.out.println("hello, A");
    }

}

@Component
public class ServiceB {

    private ServiceA a;

    @Autowired
    public ServiceB(ServiceA a) {
        this.a = a;
    }

    // public void setA(ServiceA a) {
    //     this.a = a;
    // }

    @PreDestroy
    public void hello() {
        System.out.println("hello, B");
    }
}


@SpringBootApplication
public class DiCycleApplication {

    public static void main(String[] args) {
        ConfigurableApplicationContext ctx = SpringApplication.run(DiCycleApplication.class, args);
    }

}
#+end_example

运行代码发现确实成功运行, 没有循环依赖错误提示了.
但是事情真的完美解决了吗?

只需要将 ~ServiceA~ 标记为Lazy再次运行, 就又出现了循环依赖问题.
#+begin_example
***************************
APPLICATION FAILED TO START
***************************

Description:

The dependencies of some of the beans in the application context form a cycle:

┌─────┐
|  serviceB defined in file [/Users/wkunc/IdeaProjects/DI-Cycle/target/classes/com/example/dicycle/ServiceB.class]
↑     ↓
|  serviceA
└─────┘
#+end_example

*** 原因分析

创建Bean的流程可以简化为
1. 调用构造器
2. 注册早期引用, 这样及时这个Bean依赖的组件同时依赖了当前Bean. 那也可以通过早期引用直接获取解决循环依赖
3. 填充属性, 也就是Setter注入依赖
4. initializeBean 比如 BeanPostProcessor.postProcessBeforeInitialization(), 各种 Aware 接口, @PostConstruct 等指定的Bean init 方法

而构造器注入具体发生在调用构造器的步骤.
1. 确定使用的构造器
2. 解析构造器参数, 然后会识别给这些依赖的Bean调用 BeanFactory.getBean() 方法


调用 ~BeanFactory.getBean(ServiceB.class);~ 流程

1. 确认ServiceB.class的构造器
2. 解析构造器参数调用 getBean() 方法
   1. 相当于BeanFactory.getBean(ServiceA.class);
   2. 调用ServiceA构造器(这里是默认构造器)
   3. 注册ServiceA的早期引用
   4. 填充A的属性, 发现需要ServiceB. 调用getBean(ServiceB.class)
   5. 而B正在创建中, 检测到循环依赖. 抛出异常

调用 ~BeanFactory.getBean(ServiceA.class);~ 流程

1. 确认ServiceA.class的构造器
2. 调用构造器(A 没有构造器注入,采用默认构造器调用)
3. 注册A的早期引用
5. 填充A的属性, 发现需要ServiceB. 调用getBean(ServiceB.class)
6. 确定B的构造器, 使用构造器注入A (由于A已经注册了早期引用, 所以B 这里可以轻松的获取到A)
7. 返回B
6. 完成A的属性填充, 也就是Setter注入


到这里就可以发现Bean的创建顺序会影响是否会产生报错. 前面使用了@Lazy让ServiceB先被创建.


*** Bean 的创建顺序如何确定

众所周知, BeanFactory 是一个Lazy的容器实现, 即在首次调用 getBean() 时才会触发对应Bean的创建
而 ApplcationContext 实现了及早创建Bean. 通过 ConfigurableApplicationContext.refresh() 方法
完成IOC容器的初始化工作. 最后会调用到 BeanFactory.preInstantiateSingletons() 方法上.

而BeanFactory.preInstantiateSingletons()就是简单的遍历 beanDefinitionNames 按顺序初始化.
beanDefinitionNames 这个的顺序取决于BeanDefinition注册的顺序.

这时需要查看Spring配置类,xml解析的相关代码.


**** 重复运行流水线, 打包出的镜像偶发循环依赖的原因

=Idea= 运行时会取决于target/classes 目录里的 *文件顺序* 也就是字母顺序
=Spring Boot jar= 会取决于jar包里的 *文件顺序*, 也就取决于 =maven-jar-plugin= 实现的打包顺序
公司使用的 =maven-jar-plugin= 插件版本为 =3.1.2= 此时打包时的文件顺序是随机的 *(只看了现象未分分析3.1.2代码)*
每次运行 =mvn clean package= 产生的jar包中都有不同的结果

*** Maven 打包设置
查看 [[https://github.com/apache/maven-jar-plugin][maven-jar-plugin]] 源码. 可以找到解决方法

#+begin_src xml
    <properties>
        <!--使用3.2.0以上版本的打包插件可以固定jar包中class的顺序>
        <!--配置outputTimestamp可以按照字母顺序排序-->
        <maven-jar-plugin.version>3.2.0</maven-jar-plugin.version>
        <project.build.outputTimestamp>${maven.build.timestamp}</project.build.outputTimestamp>
    </properties>
#+end_src xml

